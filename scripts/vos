#!/usr/bin/env python
#-*- coding:utf-8 -*-

class _Aux:
    """Auxiliar functions namespace"""
    @staticmethod
    def plainDict(d):
        """
        Flatten dictionary (to list)
        """
        res = []
        for k,v in d.iteritems():
            res.extend([k,v])
        return res

    # @staticmethod
    # def writeCatalogs(catalogues,at=''):
    #     """
    #     Write down INI (config) file for catalogues (resources)
    #     """
    #     from astropy.table import Table
    #     assert isinstance(catalogues,Table)
    #
    #     localDir = './'
    #     if not at:
    #         at = localDir
    #     if not (os.path.exists(at) or at is localDir):
    #         try:
    #             os.mkdir(at)
    #         except:
    #             print >> sys.stderr, "Not able to create directory '%s'. Check your permissions." % at
    #             sys.exit(1)
    #
    #     try:
    #         fp = open(at+'/README.txt','w')
    #     except:
    #         print >> sys.stderr, "Not able to write to directory '%s'. Check your permissions." % at
    #
    #     print("\nCatologues selected [%d]:" % len(catalogues))
    #     out = {}
    #     for c in catalogues:
    #         out[c.shortname()] = c.summary()
    #         if False:
    #             with open(at+'/'+c.shortname()+'.txt','w') as fp:
    #                 for f in c.fielddesc():
    #                     f0 = unicode(f[0]).enconde('utf-8')
    #                     f1 = unicode(f[1]).enconde('utf-8')
    #                     f2 = unicode(f[2]).enconde('utf-8')
    #                     f3 = unicode(f[3]).enconde('utf-8')
    #                     fp.write("%-20s : %-40s : %-35s : %-10s\n" % (f0,f1,f2,f3))
    #     config.write_ini(out,at+'/CATALOGS.ini')



from collections import OrderedDict
_SUBCOMMANDS = OrderedDict()
_SUBCOMMANDS['resources'] = "Query registries for SCS/SSA resources"
_SUBCOMMANDS['catalogs'] = "Search for object/position within SCS services"
_SUBCOMMANDS['spectra'] = "Search for object/position within SSA services"

_USAGE = """ vos <command> [<args>]

            Possible commands are:
                {0:<20}{1}
                {2:<20}{3}
                {4:<20}{5}
        """.format(*_Aux.plainDict(_SUBCOMMANDS))


class VOSearch(object):

    def __init__(self,argv=None):
        import argparse
        parser = argparse.ArgumentParser(
                            description = 'Search VO resources',
                            usage = _USAGE)
        parser.add_argument('command',
                            help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(argv[1:2])
        if not hasattr(self, args.command):
            print 'Unrecognized command'
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)(argv[2:])

    def resources(self,argv):
        """
        Search resources in Registry
        """
        from eada.vo import cli
        ret = cli.registry.run(argv,desc=_SUBCOMMANDS['resources'])

        ret.write()

        # #FIXME: bug ahead at 'args.band' if using 'argv' from the calling function
        # writeCatalogs(ret,args.band)

    def catalogs(self,argv):
        """
        Search objects in SCS
        """
        from eada.vo import cli
        scs = cli.scs.run(argv,desc=_SUBCOMMANDS['catalogs'])

        outfile = 'test.csv'
        scs.write(outfile)

        from astropy.table.table import Table
        if outfile and isinstance(ret,Table):
            table.write(outfile,format='ascii',delimiter=',')

    def spectra(self,argv):
        """
        Search objects in SSA
        """
        from vos.cli.ssa import SSA
        ssa = SSA(description=_SUBCOMMANDS['spectra'])
        args = ssa.parser.parse_args(argv)
        print 'Arguments: ' % args


if __name__ == '__main__':
    import sys
    VOSearch(sys.argv)
