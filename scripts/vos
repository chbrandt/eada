#!/usr/bin/env python
#-*- coding:utf-8 -*-

class _Aux:
    """Auxiliar functions namespace"""
    @staticmethod
    def plainDict(d):
        """
        Flatten dictionary (to list)
        """
        res = []
        for k,v in d.items():
            res.extend([k,v])
        return res

    @staticmethod
    def writeCatalogs(catalogues,at=''):
        localDir = './'
        if not at:
            at = localDir
        if not (os.path.exists(at) or at is localDir):
            try:
                os.mkdir(at)
            except:
                print("Not able to create directory '%s'. Check your permissions." % at)#, file=sys.stderr)
                sys.exit(1)

        try:
            fp = open(at+'/README.txt','w')
        except:
            print("Not able to write to directory '%s'. Check your permissions." % at)#, file=sys.stderr)

        print(("\nCatologues selected [%d]:" % len(catalogues)))
        out = {}
        for c in catalogues:
            out[c.shortname()] = c.summary()
            if False:
                with open(at+'/'+c.shortname()+'.txt','w') as fp:
                    for f in c.fielddesc():
                        f0 = str(f[0]).enconde('utf-8')
                        f1 = str(f[1]).enconde('utf-8')
                        f2 = str(f[2]).enconde('utf-8')
                        f3 = str(f[3]).enconde('utf-8')
                        fp.write("%-20s : %-40s : %-35s : %-10s\n" % (f0,f1,f2,f3))
        config.write_ini(out,at+'/CATALOGS.ini')


from collections import OrderedDict
_SUBCOMMANDS = OrderedDict()
_SUBCOMMANDS['resources'] = "Query registries for SCS/SSA resources"
_SUBCOMMANDS['catalogs'] = "Search for object/position within SCS services"
_SUBCOMMANDS['spectra'] = "Search for object/position within SSA services"

_USAGE = """ vos <command> [<args>]

            Possible commands are:
                {0:<20}{1}
                {2:<20}{3}
                {4:<20}{5}
        """.format(*_Aux.plainDict(_SUBCOMMANDS))


class VOSearch(object):

    def __init__(self,argv=None):
        import argparse
        parser = argparse.ArgumentParser(
                            description = 'Search VO resources',
                            usage = _USAGE)
        parser.add_argument('command',
                            help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)(argv[2:])

    def resources(self,argv):
        """
        Search resources in Registry
        """
        from eada.vo import cli
        ret = cli.registry.run(argv,desc=_SUBCOMMANDS['resources'])

        # #FIXME: bug ahead at 'args.band' if using 'argv' from the calling function
        # writeCatalogs(ret,args.band)

    def catalogs(self,argv):
        """
        Search objects in SCS
        """
        from eada.vo import cli
        scs = cli.scs.run(argv,desc=_SUBCOMMANDS['catalogs'])

        # outfile = 'test.csv'
        # scs.write(outfile)
        #
        # from astropy.table.table import Table
        # if outfile and isinstance(ret,Table):
        #     table.write(outfile,format='ascii',delimiter=',')

    def spectra(self,argv):
        """
        Search objects in SSA
        """
        from vos.cli.ssa import SSA
        ssa = SSA(description=_SUBCOMMANDS['spectra'])
        args = ssa.parser.parse_args(argv)
        print('Arguments: ' % args)

def _list():
    print('_list()')

def _parse_list_subcommand(subargs):
    print('LIST')
    print('Given subargs:',subargs)
    parser = argparse.ArgumentParser(description="List available services")
    subparser = listing.add_subparsers(title='list-subcommands')
    # --- List-EPNTAP ---
    list_epntap = subparser.add_parser('epntap', help="List EPN-TAP services")
    list_epntap.add_argument('--length', dest='count', action='store_true',
                         help="List services' number of records")
    list_epntap.add_argument('--minimal', dest='schema_only', action='store_true',
                         help="List the names of the schema only")
    list_epntap.set_defaults(func=_list)
    args = parser.parse_args(subargs)
    print(args)
    # --- List-SCS ---
    # list_scs = list_subparser.add_parser('scs', help="List SCS services")


if __name__ == '__main__':
    import sys
    import os
    import argparse

    description = """
    Discover and download data from VO services.
    """
    parser = argparse.ArgumentParser(description=description, add_help=False)
    parser.add_argument('-h', '--help', action='help',
                        help="Use '--help' on subcommands to know more about them")

    subparsers = parser.add_subparsers(title='Subcommands')

    # === List ===
    # def _list():
    #     print('_list()')
    listing = subparsers.add_parser('list', help="List available services")
    listing.set_defaults(func=_parse_list_subcommand)
    # list_epntap = listing
    # list_subparser = listing.add_subparsers(title='list-subcommands')
    # --- List-EPNTAP ---
    # list_epntap = list_subparser.add_parser('epntap', help="List EPN-TAP services")
    # list_epntap.add_argument('--length', dest='count', action='store_true',
    #                      help="List services' number of records")
    # list_epntap.add_argument('--minimal', dest='schema_only', action='store_true',
    #                      help="List the names of the schema only")
    # list_epntap.set_defaults(func=_list)
    # --- List-SCS ---
    # list_scs = list_subparser.add_parser('scs', help="List SCS services")

    # === Update ===
    updating = subparsers.add_parser('update', help="Update the list of resources")
    updating.add_argument('service_type',
                            choices=['epntap','scs'],
                            help="Type of service to look for in VO registry")



    # === Fetch ===
    def _fetch():
        print('_fetch()')
    fetching = subparsers.add_parser('fetch', help='Fetch data from a service')
    fetching.add_argument('schema', help="Name of EPN-Core schema ('schema.epn_core')")
    fetching.add_argument('--limit', dest='limit', type=int,
                          help='Limit the number of returned records',
                          default=None)
    fetching.add_argument('--percent', dest='percent', type=float,
                          help='Fraction (in percentile) of table size records to return',
                          default=None)
    fetching.set_defaults(func=_fetch)

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(0)

    args,eargs = parser.parse_known_args()
    print('Given command_line arguments:',args,eargs)
    args.func(eargs)
