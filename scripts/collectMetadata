# -*- coding: utf-8 -*-
"""
Created on Wed Sep 24 15:59:21 2014

@author: chbrandt
"""

import json
import string
import re

from collections import OrderedDict

from astropy.io.votable import ucd
from astropy.table import Table

from zyxw.vo.conesearch import conesearch

import warnings
warnings.simplefilter('ignore')

class Config:

    class WaveBands:
        # Wavebands found on USVAO conesearch services. Values were collected from
        #  the JSON files created by Astropy's function 'check_conesearch_sites'.
        _usvo = set(['EUV',
                     'Gamma-ray',
                     'Infrared',
                     'Optical',
                     'Radio',
                     'UV',
                     'X-ray'])

        def set(self):
            return self._usvo


    class UCDs(ucd.UCDWords):
        # UCDs defined by ivoa [ http://cdsweb.u-strasbg.fr/UCD/ ]
        #
        def words(self,prefix=None):
            vals = list(self._capitalization.values())
            if prefix:
                assert(prefix in list(self._capitalization.keys()))
                vals = [ str(w) for w in vals if string.find(w,prefix)==0 ]
            #vals.sort()
            return vals

        def set(self):
            _set = self.words()
            return set(_set)

def getUCD(SCSresult):
    """Returns a list with all (valid) UCDs from a table"""
    from astropy.io.votable import ucd
    tab = SCSresult
    l1 = []
    for f in tab.fielddesc():
        if not f.ucd:
            continue
        if not ucd.check_ucd(f.ucd):
            continue
        l2 = []
        for u in ucd.parse_ucd(f.ucd):
            _u = str(u[1])
            if not _u in l1:
                l2.append(_u)
        l1.extend(l2)
    return l1

def isAlpha(s):
    if s.isalpha() or s is '-':
        return True
    return False



class JSON:

    def read(jsonfile):
        """
        Reads a json file with a 'catalogs' entry, which is returned,
        otherwise False is returned.
    
        - jsonfile : filename
        """
        _key = 'catalogs'
        try:
            fp = open(jsonfile)
            jfile = json.load(fp)
        except:
            return None

        if _key not in jfile:
            return False

        catalogs = jfile[_key]
        return catalogs

class Strct:

    class CatalogServices(dict):

        def __init__(self,name=None):
            self['name'] = name if name else []
            self['unknown'] = []

        def initFilters(self,initVal=[],confObj):
            for o in confObj.set():
                self[o] = initVal

        
def filterCatalogs(jsonFilename):
    """
    The JSON file given is the output from Astropy's validate service tool.
    The file contains a set of metadata which we are interested in. The aim 
    of this function is to read these data and build a (csv) file/table.
    """
    
    # First, open the json file
    catalogs = JSON.read(jsonFilename)

    # We need a structure to save the parameters of our interests.
    # 'mdata' will hold the list of catalogs that succeed the filters applied,
    # so far, "wavebands" and "ucds".
    mdata = Strct.CatalogServices()
    mdata.initFilters([],Config.WaveBands())
    mdata.initFilters([],Config.UCDs())

    # Now, let's run over each catalog entry and get the data    
    for name,cat in catalogs.items():
        # Create a temporary box for the current catalog's metadata
        md = Strct.CatalogServices(str(name))
        md.initFilters(False,Config.WaveBands())
        md.initFilters(False,Config.UCDs())
        
        # Read catalogs' item; read its supported wavebands and
        # then the ucds available:
        # - first clean the #-separated string and split it
        s = re.sub('"','',str(cat['waveband']))
        _wband = ''
        for _ in s:
            _wband += _ if isAlpha(_) else ','
        _wband = _wband.split(',')
        _wband = [ w for w in _wband if w ]
        unknown_wb = ''
        # each known band will be flaged True
        for wb in _wband:
            if wb not in md:
                unknown_wb += wb+','
                continue
            md[wb] = True
        # - then the same for ucds, but now they have to be read from the 
        # catalog table's metadata, which has to be retrieved from the service 
        url = str(cat['url'])
        print(("Searching %s" % (cat['title'])))
        try:
            res = conesearch(0,0,0.0001,url)  # Null search for metadata only
        except:
            continue
        if res is None:
            print("Not a valid table returned.")
            continue

        resUCDs = getUCD(res)
        unknown_ucd = ''
        for uw in resUCDs:
            if uw not in md:
                unknown_ucd += uw+','
                continue
            md[uw] = True
            
        # Add the verification-value for this catalog to the respective
        # entries in the master data structure 'mdata'
        assert(list(md.keys())==list(mdata.keys()))
        for k in list(md.keys()):
            assert(isinstance(list,mdata[k]))
            mdata[k].append(md[k])

        # Unknown filters (waveband,ucd) go to the so named key, as 
        # a comma-separated string
        unknown = '#waveband:'+','+ unknown_wb.strip(',')
        unknown += '#ucd:'+','+ unknown_ucd.strip(',')
        mdata['unknown'].append(unknown)

    tab = Table(mdata)
    tab.pprint()
    return tab
#    for k in mdata.keys():
#        for v in mdata[k]:
#            print v,
#        print "\n"
